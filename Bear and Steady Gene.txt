7)PROGRAM STATEMENT:
A gene is represented as a string of length  (where  is divisible by ), composed of the letters , , , and . It is considered to be steady if each of the four letters occurs exactly  times. For example,  and  are both steady genes.

Bear Limak is a famous biotechnology scientist who specializes in modifying bear DNA to make it steady. Right now, he is examining a gene represented as a string . It is not necessarily steady. Fortunately, Limak can choose one (maybe empty) substring of  and replace it with any string of the same length.

Modifying a large substring of bear genes can be dangerous. Given a string , can you help Limak find the length of the smallest possible substring that he can replace to make  a steady gene?

Note: A substring of a string  is a subsequence made up of zero or more contiguous characters of .

As an example, consider . The substring  just before or after  can be replaced with  or . One selection would create .

Function Description

Complete the  function in the editor below. It should return an integer that represents the length of the smallest substring to replace.

steadyGene has the following parameter:

gene: a string
Input Format

The first line contains an interger  divisible by , that denotes the length of a string .
The second line contains a string  of length .

Constraints

 is divisible by 
Subtask

 in tests worth  points.
Output Format

Print the length of the minimum length substring that can be replaced to make  stable.

Sample Input

8  
GAAATAAA
Sample Output

5
Explanation

One optimal solution is to replace  with  resulting in .
The replaced substring has length .

OUTPUT:
Language: C++
Result: Test case #10/10
Program:
#include <bits/stdc++.h>
using namespace std;
int n;
char inp[500007];
int ok[1007];
int sum[500007][5];
int bsa, bsb, bss;
int p1;
inline int is_ok(int v, int u)
{
    for (int i=1; i<=4; i++)
    {
        if (sum[n][i]-sum[u][i]+sum[v-1][i]>n/4)
        {
            return 0;
        }
    }
    return 1;
}
inline int is_pos(int v)
{
    for (int i=1; i+v-1<=n; i++)
    {
        if (is_ok(i, i+v-1))
        {
            return 1;
        }
    }
    return 0;
}
int main()
{
    ok['A']=1;
    ok['C']=2;
    ok['G']=3;
    ok['T']=4;
    assert(scanf("%d", &n)==1);
    assert(n>=4 && n<=500000 && !(n&3));
    assert(scanf("%s", inp+1)==1);
    for (int i=1; i<=n; i++)
    {
        assert(ok[inp[i]]);
    }
    assert(!inp[n+1]);
    assert(scanf("%d", &p1)==EOF);
    for (int i=1; i<=n; i++)
    {
        for (int j=1; j<=4; j++)
        sum[i][j]=sum[i-1][j];
        sum[i][ok[inp[i]]]++;
    }
    bsa=0;
    bsb=n;
    while(bsa<bsb)
    {
        bss=(bsa+bsb)>>1;
        if (is_pos(bss))
        bsb=bss;
        else
        bsa=bss+1;
    }
    printf("%d\n", bsa);
    return 0;
}