3)PROBLEM STATEMENT:
Taylor loves trees, and this new challenge has him stumped!

Consider a tree, , consisting of  nodes. Each node is numbered from  to , and each node  has an integer, , attached to it.

A query on tree  takes the form w x y z. To process a query, you must print the count of ordered pairs of integers  such that the following four conditions are all satisfied:

 the path from node  to node .
 path from node  to node .
Given  and  queries, process each query in order, printing the pair count for each query on a new line.

Input Format

The first line contains two space-separated integers describing the respective values of  (the number of nodes) and  (the number of queries).
The second line contains  space-separated integers describing the respective values of each node (i.e., ).
Each of the  subsequent lines contains two space-separated integers,  and , defining a bidirectional edge between nodes  and .
Each of the  subsequent lines contains a w x y z query, defined above.

Constraints

Scoring for this problem is Binary, that means you have to pass all the test cases to get a positive score.

Output Format

For each query, print the count of ordered pairs of integers satisfying the four given conditions on a new line.

Sample Input

10 5
10 2 3 5 10 5 3 6 2 1
1 2
1 3
3 4
3 5
3 6
4 7
5 8
7 9
2 10
8 5 2 10
3 8 4 9
1 9 5 9
4 6 4 6
5 8 5 8
Sample Output

0
1
3
2
0
Explanation

We perform  queries on the following tree:

image

Find the number of valid ordered pairs where  is in the path from node  to node  and  is in the path from node  to node . No such pair exists, so we print .
Find the number of valid ordered pairs where  is in the path from node  to node  and  is in the path from node  to node . One such pair, , exists, so we print .
Find the number of valid ordered pairs where  is in the path from node  to node  and  is in the path from node  to node . Three such pairs, , , and  exist, so we print .
Find the number of valid ordered pairs where  is in the path from node  to node  and  is in the path from node  to node . Two such pairs,  and , exist, so we print .
Find the number of valid ordered pairs where  is in the path from node  to node  and  is in the path from node  to node . No such pair exists, so we print .

OUTPUT:
Language: C++
Result: Test case #18/18
Program:
#define __USE_MINGW_ANSI_STDIO 0
#include <bits/stdc++.h>

#define F first
#define S second
#define pb push_back
#define forn(i, n) for(int i = 0 ; (i) < (n) ; ++i)
#define eprintf(...) fprintf(stderr, __VA_ARGS__),fflush(stderr)
#define sz(a) ((int)(a).size())
#define all(a) (a).begin(),a.end()
#define pw(x) (1LL<<(x))

using namespace std;

typedef long long ll;
typedef double dbl;
typedef vector<int> vi;
typedef pair<int, int> pi;

const int inf = 1.01e9;
const dbl eps = 1e-9;

/* --- main part --- */

const int N = 2e5 + 10;
const int L = 20;

int p[N][L];

unordered_map<int, int> M;
int Last = 0;

int get(int x)
{
    if (M.find(x) == M.end())
    {
        M[x] = Last++;
    }
    return M[x];
}


const int C = 200;

int cntDep[C];
int used[N];
int tin[N], tout[N], tt = 0;
int dep[N];
int c[N];
vi v[N];

void dfs(int x, int d = 0, int pr = 0)
{
    p[x][0] = pr;
    for (int i = 1; i < L; ++i) p[x][i] = p[p[x][i - 1]][i - 1];

    used[x] = 1;
    dep[x] = d;
    cntDep[d % C]++;
    tin[x] = tt++;
    for (int y : v[x])
    {
        if (!used[y])
        {
            dfs(y, d + 1, x);
        }
    }
    tout[x] = tt++;
}

int lca(int x, int y)
{
    if (tin[x] <= tin[y] && tout[y] <= tout[x]) return x;
    for (int i = L - 1; i >= 0; --i)
    {
        int z = p[x][i];
        if (!(tin[z] <= tin[y] && tout[y] <= tout[z])) x = z;
    }
    return p[x][0];
}

int bh = 0;


ll RES[N];

int up(int x, int d)
{
    forn(i, L) if (d & pw(i)) x = p[x][i];
    return x;
}


const int NC = N / C;

int jump[NC];
int CNT = 0;
int ID[N];
int RID[NC];
ll MEM[NC][NC];

int CURRENT_ID;

vector<pi> TOADD[N];
vector<pi> TODEL[N];

inline void add(int x, int col, int dx)
{
    if (dx == -1)
    {
        TODEL[x].pb({col, CURRENT_ID});
    }
    else if (dx == 1)
    {
        TOADD[x].pb({col, CURRENT_ID});
    }
    else assert(false);

}